{"version":3,"sources":["game-of-life.tsx","Grid.tsx","Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["possibleCells","aliveCells","possibles","Set","coords","coordsToInts","x","y","i","j","add","coordsToString","aliveNeighbours","coordinates","count","has","split","parseInt","tick","nextAliveCells","possibleCellSet","cell","neighbours","useCellStyles","createUseStyles","Cell","props","outline","height","size","classes","aliveClass","alive","className","onClick","toggle","useGridStyles","Grid","params","padding","gridScale","display","margin","gridTemplateColumns","columnCount","gridTemplateRows","rowCount","Math","floor","window","innerHeight","innerWidth","cellSize","initAliveCells","playing","useState","setAliveCells","newCells","delete","useCellState","initialAliveCells","play","useEffect","timer","setTimeout","clearTimeout","cells","push","key","populateGrid","Pause","viewBox","points","Play","Player","togglePlay","App","setPlaying","usePlay","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAYMA,EAAgB,SAACC,GACrB,IAD8D,EACxDC,EAAyB,IAAIC,IAD2B,cAEzCF,GAFyC,IAE9D,2BAEE,IAFgC,IAAvBG,EAAsB,UAChBC,EAAaD,GADG,mBACxBE,EADwB,KACrBC,EADqB,KAEtBC,EAAIF,EAAI,EAAGE,GAAKF,EAAI,EAAGE,IAC9B,IAAK,IAAIC,EAAIF,EAAI,EAAGE,GAAKF,EAAI,EAAGE,IAC9BP,EAAUQ,IAAIC,EAAeH,EAAGC,IANwB,8BAU9D,OAAOP,GAGHU,EAAkB,SAACC,EAAqBZ,GAG5C,IAFA,IAAIa,EAAQ,EADoE,EAEjET,EAAaQ,GAFoD,mBAEzEP,EAFyE,KAEtEC,EAFsE,KAGvEC,EAAIF,EAAI,EAAGE,GAAKF,EAAI,EAAGE,IAC9B,IAAK,IAAIC,EAAIF,EAAI,EAAGE,GAAKF,EAAI,EAAGE,IAC1BD,IAAMF,GAAKG,IAAMF,GAGjBN,EAAWc,IAAIJ,EAAeH,EAAGC,KACnCK,IAIN,OAAOA,GAGHT,EAAe,SAACQ,GAA2C,IAAD,EAC/CA,EAAYG,MAAM,KAD6B,mBACvDV,EADuD,KACpDC,EADoD,KAE9D,MAAO,CAACU,SAASX,GAAIW,SAASV,KAG1BI,EAAiB,SAACL,EAAWC,GACjC,MAAM,GAAN,OAAUD,EAAV,YAAeC,IAGFW,EAlDF,SAACjB,GACZ,IADqD,EAC/CkB,EAA8B,IAAIhB,IAClCiB,EAAkBpB,EAAcC,GAFe,cAGlCmB,GAHkC,IAGrD,2BAAoC,CAAC,IAA1BC,EAAyB,QAC5BC,EAAaV,EAAgBS,EAAMpB,IACrB,IAAfqB,GAAqC,IAAfA,GAAoBrB,EAAWc,IAAIM,KAC5DF,EAAeT,IAAIW,IAN8B,8BASrD,OAAOF,GCEHI,G,MAAgBC,YAAgB,CACpCC,KAAM,SAACC,GAAD,MAAuB,CAC3BC,QAAS,kBACTC,OAAO,GAAD,OAAKF,EAAMG,KAAX,WAIJJ,EAAO,SAACC,GACZ,IAAMI,EAAUP,EAAcG,GACxBK,EAAaL,EAAMM,MAAQ,QAAU,OAC3C,OACE,yBAAKC,UAAS,UAAKH,EAAQL,KAAb,YAAqBM,GAAcG,QAAS,kBAAMR,EAAMS,aAwB1E,IAAMC,EAAgBZ,YAAgB,CACpCa,KAAM,SAACC,GACL,IAAMC,EAAU,KAAO,EAAID,EAAOE,WAAa,EAQ/C,MAPe,CACbC,QAAS,OACTC,OAAQ,OACRH,QAAQ,OAAD,OAASA,EAAT,MACPI,oBAAoB,UAAD,OAAYL,EAAOM,YAAnB,UACnBC,iBAAiB,UAAD,OAAYP,EAAOQ,SAAnB,cAqDPT,EA1BF,SAACX,GACZ,IAGMoB,EAAWC,KAAKC,MAAMC,OAAOC,aAHjB,GAG4C,IAF5C,IAGZN,EAAcG,KAAKC,MAJP,GAIaC,OAAOE,WAHpB,IAIZC,EAAWZ,GAAkBI,EANF,EArBd,SAACS,EAA6BC,GAAgF,IAAD,EAC5FC,mBAASF,GADmF,mBACzHpD,EADyH,KAC7GuD,EAD6G,KAehI,MAAO,CAACvD,EAZO,SAACY,GACd,IAAGyC,EAAH,CACA,IAAMG,EAAW,IAAItD,IAAIF,GACzBwD,EAAS1C,IAAIF,GAAe4C,EAASC,OAAO7C,GAAe4C,EAAS/C,IAAIG,GACxE2C,EAAcC,KAGH,WACX,IAAMA,EAAWvC,EAAKjB,GACtBuD,EAAcC,KAiBmBE,CAAajC,EAAMkC,kBAAmBlC,EAAM4B,SAR9C,mBAQ1BrD,EAR0B,KAQdkC,EARc,KAQN0B,EARM,KAUjCC,qBAAU,WACR,GAAIpC,EAAM4B,QAAS,CACjB,IAAMS,EAAQC,WAAWH,EAAM,KAC/B,OAAO,kBAAMI,aAAaF,QAI9B,IAAMjC,EAAUM,EAAc,CAACU,WAAUF,cAAaJ,UAhBpC,KAkBlB,OACE,yBAAKP,UAAWH,EAAQO,MA3E5B,SACEO,EACAE,EACAM,EACAnD,EACAkC,GAIE,IAFA,IAAM+B,EAAQ,GAEN3D,EAAI,EAAGA,EAAIuC,EAAUvC,IAC3B,IADiC,IAAD,WACxBD,GACN,IAAMO,EAAW,UAAMP,EAAN,YAAWC,GACtByB,EAAQ/B,EAAWc,IAAIF,GAE7BqD,EAAMC,KAAK,kBAAC,EAAD,CAAMC,IAAG,UAAK9D,EAAL,YAAUC,GAAKsB,KAAMuB,EAAUpB,MAAOA,EAAOG,OAD1C,kBAAMA,EAAOtB,QAH9BP,EAAI,EAAGA,EAAIsC,EAAatC,IAAM,EAA9BA,GAOV,OAAO4D,EA2DJG,CAAazB,EAAaE,EAAUM,EAAUnD,EAAYkC,KCnG3DmC,G,MAAQ,SAAC5C,GACb,OACE,yBAAKO,UAAU,SAASsC,QAAQ,YAAYrC,QAASR,EAAMQ,SACzD,6BAASsC,OAAO,wBAChB,6BAASA,OAAO,6BAKhBC,EAAO,SAAC/C,GACZ,OACE,yBAAKO,UAAU,SAASsC,QAAQ,YAAYrC,QAASR,EAAMQ,SACzD,6BAASsC,OAAO,qBAePE,EARA,SAAChD,GACd,OACE,6BACIA,EAAM4B,QAAU,kBAAC,EAAD,CAAOpB,QAASR,EAAMiD,aAAgB,kBAAC,EAAD,CAAMzC,QAASR,EAAMiD,eCZ7Ef,EAAoB,IAAIzD,IAAI,CAAC,MAAO,MAAO,MAAO,MAAO,QAehDyE,MAZf,WAAgB,IAAD,EAXC,WAA8B,IAAD,EACbrB,oBAAS,GADI,mBACpCD,EADoC,KAC3BuB,EAD2B,KAK3C,MAAO,CAACvB,EAHW,WACjBuB,GAAYvB,KASgBwB,GADjB,mBACNxB,EADM,KACGqB,EADH,KAGb,OACE,yBAAK1C,UAAU,OACb,qDACA,kBAAC,EAAD,CAAQqB,QAASA,EAASqB,WAAYA,IACtC,kBAAC,EAAD,CAAMf,kBAAmBA,EAAmBN,QAASA,MCXvCyB,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25761379.chunk.js","sourcesContent":["const tick = (aliveCells: Set<string>): Set<string> => {\n  const nextAliveCells: Set<string> = new Set()\n  const possibleCellSet = possibleCells(aliveCells)\n  for (const cell of possibleCellSet) {\n    const neighbours = aliveNeighbours(cell, aliveCells)\n    if ((neighbours === 3) || (neighbours === 2 && aliveCells.has(cell))) {\n      nextAliveCells.add(cell)\n    }\n  }\n  return nextAliveCells\n}\n\nconst possibleCells = (aliveCells: Set<string>): Set<string> => {\n  const possibles: Set<string> = new Set()\n  for (const coords of aliveCells) {\n    const [x, y] = coordsToInts(coords)\n    for (let i = x - 1; i <= x + 2; i++) {\n      for (let j = y - 1; j <= y + 2; j++) {\n        possibles.add(coordsToString(i, j))\n      }\n    }\n  }\n  return possibles\n}\n\nconst aliveNeighbours = (coordinates: string, aliveCells: Set<string>): number => {\n  let count = 0\n  const [x, y] = coordsToInts(coordinates)\n  for (let i = x - 1; i <= x + 1; i++) {\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (i === x && j === y) {\n        continue;\n      }\n      if (aliveCells.has(coordsToString(i, j))) {\n        count ++\n      }\n    }\n  }\n  return count\n}\n\nconst coordsToInts = (coordinates: string): [number, number] => {\n  const [x, y] = coordinates.split(',');\n  return [parseInt(x), parseInt(y)];\n}\n\nconst coordsToString = (x: number, y: number): string => {\n  return `${x},${y}`\n}\n\nexport default tick\n","import React, { useState, useEffect } from 'react';\nimport { createUseStyles } from 'react-jss'\nimport tick from './game-of-life'\nimport './Grid.css';\n\ntype CellProps = {\n  alive: boolean;\n  size: number;\n  toggle: () => void;\n};\n\nconst useCellStyles = createUseStyles({\n  Cell: (props: CellProps) => ({\n    outline: \"solid 1px black\",\n    height: `${props.size}vw`,\n  })\n});\n\nconst Cell = (props: CellProps) => {\n  const classes = useCellStyles(props)\n  const aliveClass = props.alive ? \"Alive\" : \"Dead\"\n  return (\n    <div className={`${classes.Cell} ${aliveClass}`} onClick={() => props.toggle()}></div>\n  )\n}\n\nfunction populateGrid (\n  columnCount: number,\n  rowCount: number,\n  cellSize: number,\n  aliveCells: Set<string>,\n  toggle: (coordinates: string) => void) {\n\n    const cells = [];\n\n    for(let y = 0; y < rowCount; y++) {\n      for(let x = 0; x < columnCount; x++) {\n        const coordinates = `${x},${y}`\n        const alive = aliveCells.has(coordinates)\n        const toggleCallback = () => toggle(coordinates)\n        cells.push(<Cell key={`${x},${y}`} size={cellSize} alive={alive} toggle={toggleCallback}/>);\n      }\n    }\n    return cells;\n  }\n\nconst useGridStyles = createUseStyles({\n  Grid: (params: {rowCount: number; columnCount: number; gridScale: number}) => {\n    const padding = 100 * (1 - params.gridScale) / 2\n    const styles = {\n      display: \"grid\",\n      margin: \"auto\",\n      padding: `2vw ${padding}vw`,\n      gridTemplateColumns: `repeat(${params.columnCount}, 1fr)`,\n      gridTemplateRows: `repeat(${params.rowCount}, 1fr)`,\n    }\n    return styles\n  }\n});\n\nconst useCellState = (initAliveCells: Set<string>, playing: boolean): [Set<string>, (coordinates: string) => void, () => void] => {\n  const [aliveCells, setAliveCells] = useState(initAliveCells);\n\n  const toggle = (coordinates: string) => {\n    if(playing) return\n    const newCells = new Set(aliveCells)\n    newCells.has(coordinates) ? newCells.delete(coordinates) : newCells.add(coordinates)\n    setAliveCells(newCells)\n  }\n\n  const play = () => {\n    const newCells = tick(aliveCells)\n    setAliveCells(newCells)\n  }\n\n  return [aliveCells, toggle, play];\n}\n\n\ninterface GridProps {initialAliveCells: Set<string>; playing: boolean}\n\nconst Grid = (props: GridProps) => {\n  const gridScale = 0.8;\n  const cellScale = 25;\n\n  const rowCount = Math.floor(window.innerHeight * (gridScale - 0.1) / cellScale);\n  const columnCount = Math.floor(window.innerWidth * gridScale / cellScale);\n  const cellSize = gridScale * 100 / columnCount;\n\n  const [aliveCells, toggle, play] = useCellState(props.initialAliveCells, props.playing)\n\n  useEffect(() => {\n    if (props.playing) {\n      const timer = setTimeout(play, 200);\n      return () => clearTimeout(timer);\n    }\n  });\n\n  const classes = useGridStyles({rowCount, columnCount, gridScale});\n\n  return (\n    <div className={classes.Grid}>\n      {populateGrid(columnCount, rowCount, cellSize, aliveCells, toggle)}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React from 'react';\nimport './Player.css';\n\nconst Pause = (props: {onClick: () => void}) => {\n  return (\n    <svg className=\"button\" viewBox=\"0 0 60 60\" onClick={props.onClick}>\n      <polygon points=\"0,0 15,0 15,60 0,60\" />\n      <polygon points=\"25,0 40,0 40,60 25,60\" />\n    </svg>\n  )\n}\n\nconst Play = (props: {onClick: () => void}) => {\n  return (\n    <svg className=\"button\" viewBox=\"0 0 60 60\" onClick={props.onClick}>\n      <polygon points=\"0,0 50,30 0,60\" />\n    </svg>\n  )\n}\n\ninterface PlayerProps { playing: boolean; togglePlay: () => void }\n\nconst Player = (props: PlayerProps) => {\n  return (\n    <div>\n      { props.playing ? <Pause onClick={props.togglePlay}/> : <Play onClick={props.togglePlay}/> }\n    </div>\n  )\n}\n\nexport default Player\n","import React, { useState } from 'react';\nimport './App.css';\nimport Grid from './Grid';\nimport Player from './Player';\n\nconst usePlay = (): [boolean, () => void] => {\n  const [playing, setPlaying] = useState(false);\n  const togglePlay = () => {\n    setPlaying(!playing)\n  }\n  return [playing, togglePlay]\n}\n\nconst initialAliveCells = new Set([\"2,1\", \"3,2\", \"1,3\", \"2,3\", \"3,3\"])\n\n\nfunction App() {\n  const [playing, togglePlay] = usePlay()\n\n  return (\n    <div className=\"App\">\n      <h1>Conway&apos;s Game of Life</h1>\n      <Player playing={playing} togglePlay={togglePlay}></Player>\n      <Grid initialAliveCells={initialAliveCells} playing={playing} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}